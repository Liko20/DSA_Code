vector <int> boundary(Node *root)
    {
        vector<int>ans;
        if(root==NULL)
        {
            return ans;
        }
        else if(root->left==NULL&&root->right==NULL)
        {
            ans.push_back(root->data);
            return ans;
        }
        else
        {
            ans.push_back(root->data);
        leftboundary(root->left,ans);
        leafboundary(root,ans);
        rightboundary(root->right,ans);
        
        return ans;
        }
        
        
        //Your code here
        
    }
    vector<int>leftboundary(Node *root,vector<int> &ans)
    {
        if(root==NULL)
        {
            
            return ans;
        }
        if(root->left==NULL&&root->right==NULL)
        {
            return ans;
        }
        ans.push_back(root->data);
        leftboundary(root->left,ans);
        if(root->left==NULL)
        leftboundary(root->right,ans);
        return ans;
        
        
    }
    vector<int>rightboundary(Node *root,vector<int> &ans)
    {
        if(root==NULL)
        {
            return ans;
        }
        if(root->left==NULL&&root->right==NULL)
        {
            return ans;
        }
        rightboundary(root->right,ans);
        if(root->right==NULL)
        rightboundary(root->left,ans);
        ans.push_back(root->data);
        return ans;
        
    }
    vector<int>leafboundary(Node *root,vector<int> &ans)
    {
        if(root==NULL)
        {
            
            return ans;
        }
        if(root->left==NULL&&root->right==NULL)
        {
            ans.push_back(root->data);
            return ans;
        }
        
        leafboundary(root->left,ans);
        leafboundary(root->right,ans);
        return ans;
    }